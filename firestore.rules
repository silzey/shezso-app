/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and their associated data,
 *              while allowing public read access to posts. Friend request logic and chat message access
 *              are also secured based on user relationships.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /posts/{postId}: Stores posts created by users; publicly readable, but writable only by the owner.
 * - /dispensaries/{dispensaryId}: Publicly readable, but write access is not defined in this ruleset.
 * - /chats/{chatId}: Stores chat metadata. Accessible to chat participants.
 * - /chats/{chatId}/messages/{messageId}: Stores messages for a specific chat. Accessible to chat participants.
 * - /friendRequests/{toUserId}/requests/{fromUserId}: Stores friend requests. Accessible to the involved users.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Posts are publicly readable, but only the owner can modify or delete them.
 * - Listing of users is disallowed.
 * - Friend requests can only be created by the user sending the request and only modified by the user receiving it.
 * - Chats and chat messages are accessible only to participants.
 *
 * Denormalization for Authorization:
 * - The `Post` entity requires a `userId` field to enforce ownership for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with ID 'user123' can access /users/user123.
     * @deny (get, create, update, delete) User with ID 'user456' cannot access /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isSignedIn() && isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read posts, but only the owner can create, update, or delete them.
     * @path /posts/{postId}
     * @allow (get, list) Any user can read any post.
     * @allow (create) User with ID 'user123' can create a post with userId: 'user123'.
     * @allow (update, delete) User with ID 'user123' can update/delete their own post with userId: 'user123'.
     * @deny (create) User with ID 'user123' cannot create a post with userId: 'user456'.
     * @deny (update, delete) User with ID 'user123' cannot update/delete a post with userId: 'user456'.
     * @principle Public read access with owner-only write access.
     */
    match /posts/{postId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
        return resource.data.userId == request.auth.uid;
      }
      function isCreatingOwnedBy() {
        return request.resource.data.userId == request.auth.uid;
      }
      function isExistingOwner() {
          return isSignedIn() && isOwner() && resource != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && isCreatingOwnedBy();
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Allows public read access to dispensaries. Write access is not defined.
     * @path /dispensaries/{dispensaryId}
     * @allow (get, list) Any user can read any dispensary.
     * @principle Public read access.
     */
    match /dispensaries/{dispensaryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
     * @description Controls access to chat metadata, allowing only participants to read and write.
     * @path /chats/{chatId}
     * @allow (get, list) User 'user123' can read if they are in the 'participants' array.
     * @allow (create, update, delete) User 'user123' can create/update/delete if they are in the 'participants' array.
     * @deny (get, list) User 'user456' cannot read if they are not in the 'participants' array.
     * @deny (create, update, delete) User 'user456' cannot create/update/delete if they are not in the 'participants' array.
     * @principle Enforces shared access based on chat participants.
     */
    match /chats/{chatId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isParticipant() {
            return request.auth.uid in resource.data.participants;
        }
        function isCreatingParticipant() {
          return request.auth.uid in request.resource.data.participants;
        }

        allow get, list: if isSignedIn() && isParticipant();
        allow create: if isSignedIn() && isCreatingParticipant();
        allow update: if isSignedIn() && isParticipant();
        allow delete: if false; // Deleting chats is not allowed
    }

    /**
     * @description Controls access to chat messages, allowing only participants to read and write.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list) User 'user123' can read if they are a participant in the chat.
     * @allow (create) User 'user123' can create a message if they are a participant in the chat.
     * @deny (get, list) User 'user456' cannot read if they are not a participant in the chat.
     * @deny (create) User 'user456' cannot create a message if they are not a participant in the chat.
     * @principle Enforces shared access based on chat participants for messages.
     */
    match /chats/{chatId}/messages/{messageId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isChatParticipant(chatId) {
            return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        }

        allow get, list: if isSignedIn() && isChatParticipant(chatId);
        allow create: if isSignedIn() && isChatParticipant(chatId);
        allow update: if false; // Messages cannot be updated once created
        allow delete: if false; // Messages cannot be deleted
    }

    /**
     * @description Manages friend requests, allowing the recipient to modify the status and the sender to create.
     * @path /friendRequests/{toUserId}/requests/{fromUserId}
     * @allow (create) User 'user123' can create a request to 'user456'.
     * @allow (update) User 'user456' can update a request from 'user123'.
     * @deny (create) User 'user123' cannot create a request from 'user789'.
     * @deny (update) User 'user123' cannot update a request to 'user456'.
     * @principle Enforces that only the request sender can create, and only the request receiver can update.
     */
    match /friendRequests/{toUserId}/requests/{fromUserId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isRequestSender(fromUserId) {
            return request.auth.uid == fromUserId;
        }
        function isRequestReceiver(toUserId) {
            return request.auth.uid == toUserId;
        }

        allow get: if isSignedIn() && (isRequestSender(fromUserId) || isRequestReceiver(toUserId));
        allow list: if false;
        allow create: if isSignedIn() && isRequestSender(fromUserId);
        allow update: if isSignedIn() && isRequestReceiver(toUserId);
        allow delete: if false; // Deleting friend requests is not allowed.
    }
  }
}