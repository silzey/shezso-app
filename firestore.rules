/**
 * @description This ruleset enforces a strict user-ownership model for user profiles and allows public read access to posts, but restricts post creation, updates, and deletion to the owner.
 * @dataStructure
 *   - /users/{userId}: Stores user profile information. Each user document is identified by their unique Firebase Auth UID.
 *   - /posts/{postId}: Stores posts created by users.
 * @keySecurityDecisions
 *   - Users can only read and write their own profile data.
 *   - Posts are publicly readable, but only the owner can create, update, or delete them. The `userId` field on the post document identifies the owner.
 * @denormalizationForAuthorization
 *   - The `posts` collection stores a `userId` field to denote ownership and avoid needing to query the `users` collection for authorization.
 * @structuralSegregation
 *   - None applicable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the request is made by the user with matching {userId}.
     * @deny (get, create, update, delete, list) if the request is made by a different user or unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to posts. Publicly readable, but only the owner can create, update, or delete.
     * @path /posts/{postId}
     * @allow (get, list) to anyone.
     * @allow (create) only if the request.auth.uid matches the userId in the post.
     * @allow (update, delete) only if the request.auth.uid matches the userId in the existing post.
     * @deny (create, update, delete) if the request is made by a different user or unauthenticated user.
     * @principle Allows public reads but enforces document ownership for writes.
     */
    match /posts/{postId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.userId;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

        /**
     * @description Controls access to post-its within a user's document.
     * @path /users/{userId}/post-its/{postItId}
     * @allow (get, create, update, delete, list) if the request is made by the user with matching {userId}.
     * @deny (get, create, update, delete, list) if the request is made by a different user or unauthenticated user.
     */
     match /users/{userId}/post-its/{postItId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}