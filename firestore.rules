/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a hybrid security model, combining user-ownership for profile data with public read access for posts and dispensaries.
 *
 * Data Structure:
 * - `/users/{userId}`: User profile data. Access is restricted to the owning user.
 * - `/posts/{postId}`: Posts created by users. Read access is public, but only the author can modify or delete.
 * - `/dispensaries/{dispensaryId}`: Dispensary data. Public read access, write access is not currently defined.
 * - `/chats/{chatId}`: Chat metadata. Access is restricted to chat participants.
 * - `/chats/{chatId}/messages/{messageId}`: Chat messages. Access is restricted to chat participants.
 * - `/friendRequests/{toUserId}/requests/{fromUserId}`: Friend requests. Only the recipient can manage their friend requests.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Posts are publicly readable but only the owner can modify them.
 * - Listing of users is disallowed to protect privacy.
 * - Dispensaries are publicly readable, but write access is currently not defined and therefore disallowed.
 * - Chat access is limited to participants.
 * - Friend request management is limited to the recipient.
 *
 * Denormalization for Authorization:
 * - Posts require a `userId` field to determine the author for write operations.
 * - Chats require a `participants` array to authorize access to the chat and its messages.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list): if the request is made by the user with ID {userId} (isOwner).
     * @deny (get, create, update, delete, list): if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all users

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages access to posts. Allows public read access but restricts modifications to the post's author.
     * @path /posts/{postId}
     * @allow (get, list): if true (public read access).
     * @allow (create): if the request is made by an authenticated user and the `userId` field in the post matches the user's ID.
     * @allow (update, delete): if the request is made by the user who created the post (isOwner).
     * @deny (create, update, delete): if the request is made by a different user.
     * @principle Enforces owner-only writes while allowing public reads.
     */
    match /posts/{postId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    /**
     * @description Controls access to dispensary information. Public read access is allowed, but all writes are denied in this prototype.
     * @path /dispensaries/{dispensaryId}
     * @allow (get, list): if true (public read access).
     * @deny (create, update, delete): if false (no write access allowed in this prototype).
     * @principle Allows public read access but restricts all write operations.
     */
    match /dispensaries/{dispensaryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to chat metadata. Only participants of the chat can read and write.
     * @path /chats/{chatId}
     * @allow (get, list): if the user is a participant in the chat (isParticipant).
     * @allow (create): if the user is a participant in the chat (isParticipant).
     * @allow (update, delete): if the user is a participant in the chat and the document exists.
     * @deny (get, create, update, delete, list): if the request is made by a non-participant.
     * @principle Restricts access to chat participants only.
     */
    match /chats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant() {
          return isSignedIn() && request.resource.data.participants.hasAny([request.auth.uid]);
      }

      allow get, list: if isSignedIn() && resource.data.participants.hasAny([request.auth.uid]);
      allow create: if isSignedIn() && request.resource.data.participants.hasAny([request.auth.uid]);
      allow update: if isSignedIn() && resource.data.participants.hasAny([request.auth.uid]);
      allow delete: if isSignedIn() && resource.data.participants.hasAny([request.auth.uid]);

       /**
        * @description Manages access to messages within a chat. Only participants of the chat can read and write.
        * @path /chats/{chatId}/messages/{messageId}
        * @allow (get, list): if the user is a participant in the chat (isParticipant).
        * @allow (create, update, delete): if the user is a participant in the chat and the document exists.
        * @deny (get, create, update, delete, list): if the request is made by a non-participant.
        * @principle Restricts access to chat participants only.
        */
      match /messages/{messageId} {
        function isSignedIn() {
          return request.auth != null;
        }
        function isChatParticipant(chatId) {
          return isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        }

        allow get, list: if isChatParticipant(chatId);
        allow create: if isChatParticipant(chatId);
        allow update: if isChatParticipant(chatId);
        allow delete: if isChatParticipant(chatId);
      }
    }

    /**
     * @description Manages friend requests. Only the user receiving the request can modify it.
     * @path /friendRequests/{toUserId}/requests/{fromUserId}
     * @allow (get, list): if the request is intended for the user (isRecipient).
     * @allow (create, update, delete): if the request is intended for the user and the document exists.
     * @deny (get, create, update, delete, list): if the request is not intended for the user.
     * @principle Restricts access to friend requests to the recipient.
     */
    match /friendRequests/{toUserId}/requests/{fromUserId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isRecipient(toUserId) {
        return isSignedIn() && request.auth.uid == toUserId;
      }

      allow get, list: if isRecipient(toUserId);
      allow create: if isSignedIn() && request.auth.uid == toUserId;
      allow update: if isRecipient(toUserId);
      allow delete: if isRecipient(toUserId);
    }
  }
}