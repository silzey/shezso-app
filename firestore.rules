/**
 * @file Firebase Security Rules for Firestore.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and posts.
 *   Chats and ChatMessages are accessible to participants only. Friend requests can only be written to by either party.
 *   Dispensary data is publicly readable.
 *
 * @data_structure
 *   - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 *   - /posts/{postId}: Stores posts created by users, publicly readable, but writeable only by the owner.
 *   - /dispensaries/{dispensaryId}: Stores dispensary information, publicly readable.
 *   - /chats/{chatId}: Stores chat metadata; accessible only to chat participants.
 *   - /chats/{chatId}/messages/{messageId}: Stores chat messages, accessible only to chat participants.
 *   - /friendRequests/{toUserId}/requests/{fromUserId}: Stores friend requests. Only the request sender or recipient can modify the request.
 *
 * @key_security_decisions
 *   - Users can only access their own profile data.
 *   - Posts are publicly readable but can only be created, updated, or deleted by the post's owner.
 *   - Dispensary information is publicly accessible.
 *   - Chats and their messages are only accessible to participants.
 *   - Friend requests can only be written to by either the sender or the receiver.
 *   - User listing is disallowed.
 *
 * @denormalization_for_authorization To simplify rules and avoid costly `get()` operations,
 *   critical authorization data (like ownership) should be included directly in the documents being secured.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can read, update, and delete their own profile.
     * @deny (create) - If the userId does not match the authenticated user's uid.
     * @deny (get, update, delete) - If any other user tries to access a user's profile.
     * @principle Enforces user-ownership; only the authenticated user can access their own profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to posts. Posts are publicly readable, but only the owner can modify them.
     * @path /posts/{postId}
     * @allow (get, list) - Any user can read and list all posts.
     * @allow (create) - Authenticated user can create a post if the userId matches their auth.uid.
     * @allow (update, delete) - Only the owner of the post can update or delete it.
     * @deny (create) - If the userId in the post does not match the authenticated user's uid.
     * @deny (update, delete) - If a user who is not the owner tries to update or delete the post.
     * @principle Public read, owner-only write.
     */
    match /posts/{postId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.userId;
      }
      
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && isOwner();
      allow delete: if request.auth != null && isOwner();
    }

    /**
     * @description Controls access to dispensaries. Dispensary data is publicly readable.
     * @path /dispensaries/{dispensaryId}
     * @allow (get, list) - Any user can read and list dispensaries.
     * @deny (create, update, delete) - No user can create, update, or delete dispensary information.
     * @principle Public read, no write access.
     */
    match /dispensaries/{dispensaryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to chats. Only participants can access the chat.
     * @path /chats/{chatId}
     * @allow (get) - If the authenticated user is a participant in the chat.
     * @allow (list) - If the authenticated user is a participant in any chat.
     * @allow (create) - If the authenticated user is creating a chat they are a participant in.
     * @allow (update) - Only participants can update the chat.
     * @allow (delete) - Only participants can delete the chat.
     * @deny (get, list, create, update, delete) - If the user is not authenticated or not a participant.
     * @principle Shared access (closed collaborators).
     */
    match /chats/{chatId} {
      function isParticipant() {
          return request.auth != null && resource.data.participants.hasAny([request.auth.uid]);
      }


      allow get: if isParticipant();
      allow list: if request.auth != null; // Participants can list chats
      allow create: if request.auth != null && request.resource.data.participants is list && request.resource.data.participants.size() > 0 && request.resource.data.participants.hasAny([request.auth.uid]);
      allow update: if isParticipant();
      allow delete: if isParticipant();
    }

    /**
     * @description Controls access to chat messages. Only participants of the chat can access the messages.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list) - If the authenticated user is a participant in the chat.
     * @allow (create) - If the authenticated user is a participant in the chat and the senderID matches their auth.uid.
     * @allow (update, delete) - Only participants can update/delete messages.
     * @deny (get, list, create, update, delete) - If the user is not authenticated or not a participant.
     * @principle Shared access (closed collaborators).
     */
    match /chats/{chatId}/messages/{messageId} {
      function isChatParticipant(chatId) {
        return request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      }


      allow get, list: if request.auth != null && isChatParticipant(chatId);
      allow create: if request.auth != null && isChatParticipant(chatId);
      allow update: if request.auth != null && isChatParticipant(chatId);
      allow delete: if request.auth != null && isChatParticipant(chatId);
    }

    /**
     * @description Controls access to friend requests. Only the sender or receiver can modify the request.
     * @path /friendRequests/{toUserId}/requests/{fromUserId}
     * @allow (get) - If the authenticated user is the sender or receiver of the friend request.
     * @allow (list) - if the authenticated user is the toUserId.
     * @allow (create) - If the authenticated user is the sender of the friend request and fromUserId matches their auth.uid.
     * @allow (update) - If the authenticated user is the sender or receiver of the friend request.
     * @allow (delete) - If the authenticated user is the sender or receiver of the friend request.
     * @deny (get, create, update, delete) - If the user is not authenticated or not the sender or receiver.
     * @principle Validates the relationship between users.
     */
    match /friendRequests/{toUserId}/requests/{fromUserId} {
      function isSenderOrReceiver(toUserId, fromUserId) {
        return request.auth != null && (request.auth.uid == toUserId || request.auth.uid == fromUserId);
      }


      allow get: if isSenderOrReceiver(toUserId, fromUserId);
      allow list: if request.auth != null && request.auth.uid == toUserId;
      allow create: if request.auth != null && request.auth.uid == fromUserId;
      allow update: if isSenderOrReceiver(toUserId, fromUserId);
      allow delete: if isSenderOrReceiver(toUserId, fromUserId);
    }
  }
}