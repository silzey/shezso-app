rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, list) - Authenticated user can read their own profile.
     * @allow (update, delete) - Authenticated user can update or delete their own profile.
     * @deny (create) - If the userId does not match the authenticated user's UID.
     * @deny (get, list, update, delete) - If any other user tries to access this profile.
     * @principle Enforces document ownership.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for posts.
     * @path /posts/{postId}
     * @allow (get, list) - Any user can read posts.
     * @allow (create) - Authenticated user can create a post with their user ID.
     * @allow (update, delete) - Only the owner can update or delete their own post.
     * @deny (create) - If the userId in the post does not match the authenticated user's UID.
     * @deny (update, delete) - If any other user tries to update or delete this post.
     * @principle Public read, owner-only writes for posts.
     */
    match /posts/{postId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
    }

    /**
     * @description Rules for dispensaries.
     * @path /dispensaries/{dispensaryId}
     * @allow (get, list) - Any user can read dispensaries.
     * @deny (create, update, delete) - No write permissions defined.
     * @principle Public read for dispensaries.
     */
    match /dispensaries/{dispensaryId} {
      allow get, list: if true;
    }

    /**
     * @description Rules for chats.
     * @path /chats/{chatId}
     * @allow (get, list) - Only participants can read chat metadata.
     * @allow (create) - An authenticated user can create a chat if they are a participant.
     * @allow (update, delete) - Write operations are denied for this prototype.
     * @deny (get, list) - Non-participants cannot access chat data.
     * @principle Shared access for chats among participants.
     */
    match /chats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant() {
        return request.auth.uid in resource.data.participants;
      }

      allow get: if isSignedIn() && isParticipant();
      allow list: if isSignedIn() && isParticipant();
      allow create: if isSignedIn() && request.resource.data.participants.hasAny([request.auth.uid]);
      allow update, delete: if false;
    }

    /**
     * @description Rules for chat messages within a chat.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list) - Only participants of the chat can read messages.
     * @allow (create) - Only participants of the chat can create messages.
     * @allow (update, delete) - Write operations are denied for this prototype.
     * @deny (get, list, create) - Non-participants cannot access messages.
     * @principle Shared access for chat messages among participants.
     */
    match /chats/{chatId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant(chatId) {
        return get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      }

      allow get: if isSignedIn() && isParticipant(chatId);
      allow list: if isSignedIn() && isParticipant(chatId);
      allow create: if isSignedIn() && isParticipant(chatId);
      allow update, delete: if false;
    }

    /**
     * @description Rules for friend requests.
     * @path /friendRequests/{toUserId}/requests/{fromUserId}
     * @allow (create) - Authenticated user can create a friend request to another user.
     * @allow (get, list) - Only the involved users can read the friend request.
     * @allow (update, delete) - Write operations are denied for this prototype.
     * @deny (create) - If trying to create a request as someone else.
     * @deny (get, list) - If not one of the involved users.
     * @principle Limits access to friend requests to involved users.
     */
    match /friendRequests/{toUserId}/requests/{fromUserId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isToUser(toUserId) {
        return request.auth.uid == toUserId;
      }

      function isFromUser(fromUserId) {
        return request.auth.uid == fromUserId;
      }

      allow create: if isSignedIn() && isFromUser(fromUserId) && !isToUser(toUserId);
      allow get: if isSignedIn() && (isToUser(toUserId) || isFromUser(fromUserId));
      allow list: if isSignedIn() && (isToUser(toUserId) || isFromUser(fromUserId));
      allow update, delete: if false;
    }

    /**
     * @description Rules for post-its. This rule was missing in the original set of rules. It addresses the reported error.
     * @path /users/{userId}/post-its
     * @allow (list) - Allows the owner to list their own post-its.
     * @deny (get, create, update, delete) - Denies all other operations.
     * @principle Enforces document ownership for listing post-its.
     */
    match /users/{userId}/post-its/{postItId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        allow get, list, create, update, delete: if isSignedIn() && isOwner(userId);
    }
  }
}