/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a user-centric security model with owner-only access to user-specific data,
 * while allowing public read access to posts. The rules are designed for rapid prototyping,
 * focusing on authorization and relational integrity while relaxing data shape validation.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /posts/{postId}: Stores posts, publicly readable but writable only by the post's author.
 * - /dispensaries/{dispensaryId}: Stores dispensary information, publicly readable.
 * - /chats/{chatId}: Stores chat metadata, accessible to chat participants.
 * - /chats/{chatId}/messages/{messageId}: Stores chat messages, accessible to chat participants.
 * - /friendRequests/{toUserId}/requests/{fromUserId}: Stores friend requests, accessible only to the involved users.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data under /users/{userId}.
 * - Posts are publicly readable, but only the author can create, update, or delete them.
 * - Dispensary information is publicly readable and writable (no authorization).
 * - Chat data and messages are only accessible to participants of the chat.
 * - Friend requests can only be created if the request initiator's id matches their auth id.
 *
 * Denormalization for Authorization:
 * - Posts should include the `userId` of the author to enable owner-only write rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (read, write) if the request is made by the user with matching userId.
     * @deny (read, write) if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users

      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);

    }

    /**
     * @description Controls access to posts.
     * @path /posts/{postId}
     * @allow (read) to anyone.
     * @allow (create, update, delete) only to the owner of the post.
     * @deny (create) if the userId in the post data does not match the request auth uid.
     * @principle Allows public read access with owner-only writes.
     */
    match /posts/{postId} {
      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.userId == request.auth.uid && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Controls access to dispensaries.
     * @path /dispensaries/{dispensaryId}
     * @allow (read, write) to anyone.
     * @principle Allows public read and write access (no authorization).
     */
    match /dispensaries/{dispensaryId} {
        allow get, list, create, update, delete: if true;
    }

    /**
     * @description Controls access to chats.
     * @path /chats/{chatId}
     * @allow (read, write) to participants of the chat.
     * @principle Enforces shared access for collaborative documents.
     */
    match /chats/{chatId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isParticipant() {
            return isSignedIn() && resource.data.participants.hasAny([request.auth.uid]);
        }

        allow get, list: if isSignedIn() && resource.data.participants.hasAny([request.auth.uid]);

        allow create: if isSignedIn() && request.resource.data.participants.hasAny([request.auth.uid]);
        allow update: if isSignedIn() && resource.data.participants.hasAny([request.auth.uid]);
        allow delete: if false;
    }

    /**
     * @description Controls access to chat messages.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (read, write) to participants of the chat.
     * @principle Enforces shared access for collaborative documents.
     */
    match /chats/{chatId}/messages/{messageId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isParticipant(chatId) {
            return isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        }

        allow get, list: if isParticipant(chatId);
        allow create: if isParticipant(chatId);
        allow update: if isParticipant(chatId);
        allow delete: if false;
    }

    /**
     * @description Controls access to friend requests.
     * @path /friendRequests/{toUserId}/requests/{fromUserId}
     * @allow (create) only if the request is made by the sender (fromUserId).
     * @allow (get, update, delete) only if the request is for the recipient (toUserId) and by the sender (fromUserId).
     * @deny (create, get, update, delete) if the user IDs don't match.
     * @principle Enforces user-initiated access for friend requests.
     */
    match /friendRequests/{toUserId}/requests/{fromUserId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isSender(fromUserId) {
            return isSignedIn() && request.auth.uid == fromUserId;
        }

        function isRecipient(toUserId) {
          return isSignedIn() && request.auth.uid == toUserId;
        }

        allow get: if isRecipient(toUserId) && isSender(fromUserId);
        allow list: if false;

        allow create: if isSender(fromUserId) && request.auth.uid == fromUserId;
        allow update: if isRecipient(toUserId) && isSender(fromUserId) && request.auth.uid == fromUserId;
        allow delete: if isRecipient(toUserId) && isSender(fromUserId);
    }
  }
}